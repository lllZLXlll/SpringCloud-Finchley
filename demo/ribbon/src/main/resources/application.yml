server:
  port: 8781

spring:
  application:
    name: ribbon
eureka:
  client:
    serviceUrl:
      defaultZone: http://user:1234@localhost:8761/eureka/


#---------------------
#自定义Ribbon 负载均衡策略
#
#(1)com.netflix.loadbalancer.RandomRule: 随机选择一个server
#
#(2)com.netflix.loadbalancer.BestAvailableRule: 选择一个最小的并发请求的server，逐个考察Server，如果Server被tripped了，则忽略
#
#(3)com.netflix.loadbalancer.RoundRobinRule: RandomRule方式轮询选择，轮询index，选择index对应位置的server
#
#(4)com.netflix.loadbalancer.WeightedResponseTimeRule: 根据响应时间分配一个weight(权重)，响应时间越长，weight越小，被选中的可能性越低
#
#(5)com.netflix.loadbalancer.RetryRule: 对选定的负载均衡策略机上重试机制，在一个配置时间段内当选择server不成功，则一直尝试使用subRule的方式选择一个可用的server
#
#(6)com.netflix.loadbalancer.ZoneAvoidanceRule：复合判断server所在区域的性能和server的可用性选择server
#---------------------

eureka-client:
  ribbon:
    NFLoadBalancerRuleClassName: com.netflix.loadbalancer.ZoneAvoidanceRule
